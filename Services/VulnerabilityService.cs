using Vuln.Models;

namespace Vuln.Services
{
    public class VulnerabilityService
    {
        private readonly Dictionary<string, Vulnerability> _vulnerabilities = [];

        public VulnerabilityService()
        {
            Vulnerability v1 = CreateVulnerability("CVE-2021-1234", "This is a vulnerability", []);
            _vulnerabilities.Add(v1.Id, v1);

            ExternalReference externalReference = new ExternalReference
            {
                SourceName = "MITRE",
                Description = "MITRE description",
            };

            Vulnerability v2 = CreateVulnerability("CVE-2021-5678", "This is another vulnerability", [externalReference]);
            _vulnerabilities.Add(v2.Id, v2);
        }

        public Vulnerability CreateVulnerability(string name, string description, List<ExternalReference> externalReferences)
        {
            var vulnerability = new Vulnerability
            {
                Id = "vulnerability--" + Guid.NewGuid().ToString(),
                Name = name,
                Description = description,
                Created = DateTime.UtcNow,
                Modified = DateTime.UtcNow,
                ExternalReferences = externalReferences
            };

            return vulnerability;
        }

        public List<Vulnerability> GetVulnerabilities()
        {
            return [.. _vulnerabilities.Values];
        }

        public Vulnerability? GetVulnerability(string id)
        {
            if (_vulnerabilities.ContainsKey(id)) {
                return _vulnerabilities[id];
            }
            return null;
        }

        public void AddVulnerability(Vulnerability vulnerability)
        {
            _vulnerabilities.Add(vulnerability.Id, vulnerability);
        }

        public void UpdateVulnerability(string id, Vulnerability vulnerability)
        {
            _vulnerabilities[id] = vulnerability;
        }

        public void DeleteVulnerability(string id)
        {
            _vulnerabilities.Remove(id);
        }
    }
}