using Microsoft.EntityFrameworkCore;
using Vuln.Data;
using Vuln.Models;

namespace Vuln.Services
{
    public class VulnerabilityFetchException : Exception
    {
        public VulnerabilityFetchException(string id) : base($"Error when fetching Vulnerability with id {id}") {}
        public VulnerabilityFetchException() : base($"Error when fetching Vulnerabilities") {}
    }

    public class VulnerabilityDuplicateException : Exception
    {
        public VulnerabilityDuplicateException(string id) : base($"Vulnerability with id {id} already exists") {}
    }

    public class VulnerabilityNotFoundException : Exception
    {
        public VulnerabilityNotFoundException(string id) : base($"Vulnerability with id {id} not found") {}
    }

    public class VulnerabilityCreateException : Exception
    {
        public VulnerabilityCreateException(string id) : base($"Error when creating Vulnerability with id {id}") {}
    }
    public class VulnerabilityUpdateException : Exception
    {
        public VulnerabilityUpdateException(string id) : base($"Error when updating Vulnerability with id {id}") {}
    }

    public class VulnerabilityDeleteException : Exception
    {
        public VulnerabilityDeleteException(string id) : base($"Error when deleting Vulnerability with id {id}") {}
    }

    public class VulnerabilityService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<VulnerabilityService> _logger;

        private const int _DEFAULT_PAGE_SIZE = 10;

        public VulnerabilityService(ApplicationDbContext context, ILogger<VulnerabilityService> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task<List<Vulnerability>> GetVulnerabilities(int offset = 0, int limit = _DEFAULT_PAGE_SIZE)
        {
            try
            {
                var vList = await _context.Vulnerability
                    .OrderBy(v => v.Created)
                    .Skip(offset)
                    .Take(limit)
                    .ToListAsync();
                return vList;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error when fetching vulnerabilities");
                throw new VulnerabilityFetchException();
            }
        }

        public async Task<Vulnerability?> GetVulnerability(string id)
        {
            try
            {
                var v = await _context.Vulnerability.FindAsync(id);
                return v;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error when finding vulnerability with id {id}");
                throw new VulnerabilityFetchException(id);
            }
        }

        public async Task AddVulnerability(Vulnerability vulnerability)
        {
            var v = await GetVulnerability(vulnerability.Id);
            if (v != null)
            {
                throw new VulnerabilityDuplicateException(vulnerability.Id);
            }

            try
            {
                vulnerability.ConvertTimesToUTC();
                _context.Vulnerability.Add(vulnerability);
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error when creating new vulnerability");
                throw new VulnerabilityCreateException(vulnerability.Id);
            }
        }

        public async Task UpdateVulnerability(string id, Vulnerability vulnerability)
        {
            var v = await GetVulnerability(id);

            if (v == null)
            {
                throw new VulnerabilityNotFoundException(id);
            }

            try
            {
                v.Name = vulnerability.Name;
                v.Description = vulnerability.Description;
                v.Created = vulnerability.Created;
                v.Modified = vulnerability.Modified;
                v.ExternalReferences = vulnerability.ExternalReferences;

                _context.Vulnerability.Update(v);
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error when updating vulnerability with id {id}");
                throw new VulnerabilityUpdateException(id);
            }            
        }

        public async Task DeleteVulnerability(string id)
        {
            var v = await GetVulnerability(id);

            if (v == null)
            {
                throw new VulnerabilityNotFoundException(id);
            }

            try
            {
                _context.Vulnerability.Remove(v);
                await _context.SaveChangesAsync();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error when deleting vulnerability with id {id}");
                throw new VulnerabilityDeleteException(id);
            }
        }
    }
}